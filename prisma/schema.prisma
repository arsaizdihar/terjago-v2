// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("PSCALE_DATABASE_URL")
  shadowDatabaseUrl    = env("PSCALE_DATABASE_URL_SHADOW")
  referentialIntegrity = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  major1        Major?    @relation(fields: [major1Id], references: [id], onDelete: Cascade, name: "user1")
  major1Id      Int?
  major2        Major?    @relation(fields: [major2Id], references: [id], onDelete: Cascade, name: "user2")
  major2Id      Int?
  majorType     MajorType @default(SAINTEK)
  role          Role      @default(USER)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Major {
  id           Int        @id
  name         String
  universityId Int
  university   University @relation(fields: [universityId], references: [id], onDelete: Cascade)
  peminat      Int        @default(0)
  dayaTampung  Int        @default(0)
  majorType    MajorType  @default(SAINTEK)
  user1        User[]     @relation("user1")
  user2        User[]     @relation("user2")
}

model University {
  id     Int     @id
  name   String
  link   String?
  majors Major[]
}

enum MajorType {
  SAINTEK
  SOSHUM
}

enum Role {
  ADMIN
  USER
}
